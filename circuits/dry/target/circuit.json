{"noir_version":"0.30.0+af57471035e4fa7eaffa71693219df6d029dbcde","hash":5639980347826403180,"abi":{"parameters":[{"name":"x","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"y","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"msgHash","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"public"},{"name":"signature","type":{"kind":"array","length":64,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"indices","type":{"kind":"field"},"visibility":"private"},{"name":"root","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"public"},{"name":"paths","type":{"kind":"array","length":3,"type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}}},"visibility":"private"}],"param_witnesses":{"indices":[{"start":160,"end":161}],"msgHash":[{"start":64,"end":96}],"paths":[{"start":193,"end":289}],"root":[{"start":161,"end":193}],"signature":[{"start":96,"end":160}],"x":[{"start":0,"end":32}],"y":[{"start":32,"end":64}]},"return_type":null,"return_witnesses":[],"error_types":{}},"bytecode":"","debug_symbols":"zZbBioMwFEX/JWsXSUzee/orwzDY1g6CaKl2YJD++8SxCm1tobeb7HzmnuQuTiCD2pWb0/dX1ezbTuUfg6rbbdFXbROmQVmR/5/doWjGueuLY69y49gmqmx24dMbd07UvqpLlTs6fyYBylYhb3mBnL2FMr0KcbqcxP4eMquQWD9D4q/qJXdhSd0lK6yfRw2ZZVtZotZOVWw8VdJ4qrh4qvhYqpC8r60xLHPYanoedjq7ZJ3lmztkNHFEbZxPo2rzwF/DD9pMlIcogiiGKIGoDKFIQ5SBKAtRKURBbhDkBkFuEOQGQW4Q5AZDbjDkBkNuMOQGQ24w5AZDbjDkBkNuMOSGQG4I5IZAbgjkhkBuyMtuhOGnOFbFpi7Hx/y4dmq289s+jP3vYVoJ2T8=","file_map":{"22":{"source":"mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n\n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(self, _bit_size: u32) -> [u1] {}\n\n    #[builtin(to_be_bits)]\n    fn __to_be_bits(self, bit_size: u32) -> [u1] {}\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    pub fn assert_max_bit_size(self: Self, bit_size: u32) {\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let num_bytes = (modulus_num_bits() as u32 + 7) / 8;\n    let x_bytes = x.to_le_bytes(num_bytes);\n    let y_bytes = y.to_le_bytes(num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i] as u8;\n            let y_byte = y_bytes[num_bytes - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\n","path":"std/field.nr"},"46":{"source":"use dep::std::ecdsa_secp256r1::verify_signature;\nuse dep::std::hash::poseidon2::Poseidon2::hash;\nuse dep::std::hash::sha256;\n\nglobal TREE_SIZE: u64 = 3;\n\nfn hasher(leaves: [[u8; 32]; 2]) -> [u8; 32] {\n    let mut leaves_arr : [u8; 64] = [0; 64];\n    for i in 0..64 {\n        leaves_arr[i] = leaves[0][i];\n    }\n    for i in 0..32 {\n        leaves_arr[i + 32] = leaves[1][i];\n    }\n    let hashed : [u8; 32] = sha256(leaves_arr);\n    // let to_field = array_to_field(hashed);\n    hashed\n}\n\nstruct MerkleTree {\n    root: [u8; 32],\n    hasher: fn([[u8; 32]; 2]) -> [u8; 32],\n}\n\nimpl MerkleTree {\n    fn default(root: [u8; 32], hasher: fn([[u8; 32]; 2]) -> [u8; 32]) -> Self {\n        Self { root, hasher }\n    }\n\n    fn root(self, leaf: [u8; 32], indices: Field, siblings: ([[u8; 32]; TREE_SIZE])) -> [u8; 32] {\n        let index_bits = indices.to_le_bits(TREE_SIZE as u32);\n        let mut node = leaf;\n        for i in 0..siblings.len() {\n            let sibling = siblings[i];\n            let mut left = sibling;\n            let mut right = node;\n            if index_bits[i] == 0 {\n                left = node;\n                right = sibling;\n            }\n            node = (self.hasher)([left, right]);\n        }\n        node\n    }\n}\n\nfn main(\n    x: [u8; 32],\n    y: [u8; 32],\n    msgHash: pub [u8; 32],\n    signature: [u8; 64], // paths: [Field; TREE_SIZE],\n    indices: Field,\n    root: pub [u8; 32],\n    paths: [[u8; 32]; TREE_SIZE]\n) {\n    let valid_signature = verify_signature(x, y, signature, msgHash);\n    assert(valid_signature);\n\n    let mut pubkey_array : [u8; 64] = [0; 64];\n    for i in 0..32 {\n        pubkey_array[i] = x[i];\n    }\n    for i in 0..32 {\n        pubkey_array[i + 32] = y[i];\n    }\n\n    let leaf = sha256(pubkey_array);\n    let mut mt = MerkleTree::default(root, hasher);\n    assert(root == mt.root(leaf, indices, paths));\n}\n\n// #[test]\n// fn test_leaf_0() {\n//     let x = [\n//         76, 17, 158, 237, 203, 160, 38, 154, 203, 149, 113, 248, 51, 105, 244, 158, 143, 147, 214, 208, 188, 57, 163, 208, 217, 91, 30, 162, 45, 193, 126, 73\n//     ];\n//     let y = [\n//         133, 130, 84, 24, 183, 146, 184, 42, 128, 217, 4, 6, 231, 202, 180, 86, 187, 249, 10, 58, 133, 202, 137, 87, 38, 204, 76, 104, 218, 230, 131, 234\n//     ];\n//     let hashed = [\n//         58, 47, 28, 212, 12, 195, 224, 102, 123, 153, 145, 57, 46, 31, 172, 198, 1, 223, 56, 171, 37, 251, 187, 20, 62, 243, 212, 89, 238, 217, 47, 192\n//     ];\n//     let signature = [\n//         228, 182, 231, 59, 213, 234, 131, 131, 111, 218, 136, 227, 65, 7, 8, 194, 156, 195, 96, 240, 207, 144, 49, 156, 4, 165, 126, 204, 59, 42, 182, 27, 117, 29, 214, 155, 229, 241, 193, 47, 125, 80, 49, 224, 232, 44, 205, 186, 159, 215, 235, 81, 67, 8, 197, 220, 251, 204, 172, 5, 42, 75, 80, 216\n//     ];\n//     let indices = 2;\n//     let root = [\n//         190, 201, 237, 135, 149, 86, 192, 236, 201, 206, 230, 136, 98, 52, 247, 66, 177, 119, 237, 9, 159, 201, 25, 182, 44, 152, 201, 162, 91, 227, 185, 53\n//     ];\n//     let paths = [\n//         [\n//             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n//         ], [\n//             161, 64, 48, 85, 152, 96, 120, 83, 141, 176, 123, 236, 156, 237, 246, 201, 6, 136, 228, 89, 172, 193, 244, 110, 59, 43, 155, 44, 240, 167, 203, 225\n//         ], [\n//             4, 169, 209, 181, 95, 199, 170, 225, 149, 252, 234, 65, 74, 110, 243, 37, 191, 11, 89, 90, 218, 76, 238, 211, 210, 20, 231, 96, 0, 7, 123, 129\n//         ]\n//     ];\n\n//     main(x, y, hashed, signature, indices, root, paths);\n// }\n","path":"/Users/madztheo/Documents/Hackathon/ETHGlobalBrussels2024/dry-mobile-app/circuits/dry/src/main.nr"}},"names":["main"]}